@using SpadCompanyPanel.Core.Models
@model SpadCompanyPanel.Core.Models.Plan

@{
    ViewBag.Title = "پلان ها";
    var selectedOptions = ViewBag.SelectedOptions as List<PlanOption>;
    var options = ViewBag.Options as List<Option>;
}
<input type="hidden" id="nav_active" value="realstate_control">
<input type="hidden" id="nav_item_active" value="realstate">
@{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-danger">
            <strong>خطا!</strong> @ViewBag.Message
        </div>
    }
}
<div class="col-lg-12">
    <div class="card card-custom gutter-b">
        <div class="card-header">
            <h3 class="card-title">
                ویرایش پلان
            </h3>
        </div>
        @using (Html.BeginForm("Edit", "Plans", FormMethod.Post, new { id = "form", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model=>model.Id)
            @Html.HiddenFor(model=>model.CurrencyId)
            @Html.HiddenFor(model=>model.RealStateId)
            @Html.HiddenFor(model => model.InsertDate)
            @Html.HiddenFor(model => model.InsertUser)
            @Html.HiddenFor(model => model.Image)

    <div class="card-body">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EnglishTitle, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EnglishTitle, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.EnglishTitle, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Rooms, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Rooms, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.Rooms, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Area, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.Area, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BathRooms, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BathRooms, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.BathRooms, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FloorNo, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FloorNo, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.FloorNo, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Type">نوع عرضه</label>
                    <div class="col-md-10">
                        <select class="form-control" id="PlanType" name="PlanType" onchange="toggleRent()">
                            <option value="1" @(Model.PlanType == 1 ? "selected='selected'" : null)>فروش</option>
                            <option value="2" @(Model.PlanType == 2 ? "selected='selected'" : null)>پیش فروش</option>
                            <option value="3" @(Model.PlanType == 3 ? "selected='selected'" : null)>اجاره</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Price, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group" style="display: @(Model.PlanType == 3 ? "block" : "none")" id="RentPriceContainer">
                    @Html.LabelFor(model => model.RentPrice, new { })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.RentPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RentPrice, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-2 col-form-label">امکانات</label>
                    <div class="col-4 col-form-label">
                        @for (int i = 0; i < options.Count / 2; i++)
                        {
                            <label class="checkbox">
                                <input type="checkbox" value="@options[i].Id" @(selectedOptions.Any(o => o.OptionId == options[i].Id) ? "checked='checked'" : null) name="options">
                                <span style="margin:15px"></span>
                                @options[i].Title
                            </label>
                        }
                    </div>
                    <div class="col-4 col-form-label">
                        @for (int i = options.Count / 2; i < options.Count; i++)
                        {
                            <label class="checkbox">
                                <input type="checkbox" value="@options[i].Id" @(selectedOptions.Any(o => o.OptionId == options[i].Id) ? "checked='checked'" : null) name="options">
                                <span style="margin:15px"></span>
                                @options[i].Title
                            </label>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control " } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EnglishDescription, new { })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EnglishDescription, new { htmlAttributes = new { @class = "form-control " } })
                @Html.ValidationMessageFor(model => model.EnglishDescription, "", new { @class = "form-text text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-label">تصویر پلان</label>
            <div class="col-lg-6 col-md-12 col-sm-12">
                <div class="image-input image-input-outline" id="plan-image">
                    <div class="image-input-wrapper" style="background-image: url(/Files/PlanFiles/PlanImages/@Model.Image)"></div>

                    <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="آپلود تصویر">
                        <i class="fa fa-pen icon-sm text-muted"></i>
                        <input type="file" name="PlanImage" id="PlanImage" accept=".png, .jpg, .jpeg" />
                        <input type="hidden" name="plan_image_remove" />
                    </label>

                    <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="cancel" data-toggle="tooltip" title="حذف تصویر">
                        <i class="ki ki-bold-close icon-xs text-muted"></i>
                    </span>
                </div>
            </div>
        </div>
    </div>
            <div class="card-footer">
                <a href="@Url.Action("Index",new { realStateId = Model.RealStateId})" class="btn btn-secondary">انصراف</a>
                <input type="submit" id="sub" value="ثبت" class="btn btn-primary mr-2" />
            </div>
        }
    </div>
</div>
<style>
    .image-input .image-input-wrapper {
        width: 200px;
    }
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="/ckeditor/ckeditor.js"></script>
    <script src="/ckeditor/adapters/jquery.js"></script>
    <script>
        $(function () {
            $('#Description').ckeditor();
            $('#EnglishDescription').ckeditor();
        });
        new KTImageInput('plan-image');
        new KTImageInput('video-image');
        var planImage = document.getElementById("PlanImage");
        planImage.onchange = function () {
            if (this.files[0].size > 3100000) {
                alert("حجم تصویر باید کمتر از 3 مگابایت باشد");
                this.value = "";
            };
        };
        var videoImage = document.getElementById("VideoImage");
        videoImage.onchange = function () {
            if (this.files[0].size > 3100000) {
                alert("حجم تصویر باید کمتر از 3 مگابایت باشد");
                this.value = "";
            };
        };
        $("#form").submit(function (e) {
            console.log($("#form").valid());
            if ($("#form").valid()) {
                console.log('uploading');
                $("#sub").val("در حال آپلود");
            }
        });
        var uploadField = document.getElementById("Video");
        uploadField.onchange = function () {
            if (this.files[0].size > 52428800) {
                alert("حجم ویدیو باید کمتر از 50 مگابایت باشد");
                this.value = "";
            };
        };
        function toggleRent() {
            var planType = $("#PlanType").find(":selected").val();
            if (parseInt(planType) === 3) {
                console.log(planType)
                $("#RentPriceContainer").show();
            } else {
                $("#RentPriceContainer").hide();
                $("#RentPrice").val(0);
            }
        }
    </script>
}